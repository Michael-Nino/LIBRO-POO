/*
 * ============================================================================
 * EJERCICIO 2: Contar vocales fuertes y d√©biles
 * ============================================================================
 * 
 * ENUNCIADO:
 *   Programa que solicite una cadena al usuario y reporte el n√∫mero de
 *   vocales fuertes y vocales d√©biles que existen en la cadena.
 * 
 * CONCEPTOS LING√ú√çSTICOS:
 *   - Vocales fuertes (abiertas): a, e, o
 *     Se llaman "fuertes" porque se pronuncian con mayor apertura bucal
 *   - Vocales d√©biles (cerradas): i, u
 *     Se llaman "d√©biles" porque se pronuncian con menor apertura bucal
 * 
 * OBJETIVO:
 *   - Clasificar vocales seg√∫n su tipo
 *   - Usar m√∫ltiples contadores
 *   - Aplicar l√≥gica condicional
 *   - Crear funciones auxiliares booleanas
 * 
 * APLICACI√ìN:
 *   - An√°lisis fon√©tico del espa√±ol
 *   - Detecci√≥n de diptongos e hiatos
 *   - Procesamiento de texto
 * ============================================================================
 */

#include <iostream>
#include <cctype>    // Para tolower()
#include <cstring>   // Para strlen()
#include <iomanip>   // Para setprecision(), fixed

using namespace std;

// =============================================================================
// FUNCIONES AUXILIARES
// =============================================================================

/*
 * Funci√≥n: esVocalFuerte
 * ----------------------
 * Determina si un car√°cter es una vocal fuerte (a, e, o)
 * 
 * Par√°metro:
 *   c - car√°cter a verificar
 * 
 * Retorna:
 *   true si es vocal fuerte (a, e, o)
 *   false en caso contrario
 * 
 * Ejemplo:
 *   esVocalFuerte('a') ‚Üí true
 *   esVocalFuerte('A') ‚Üí true (se convierte a min√∫scula internamente)
 *   esVocalFuerte('i') ‚Üí false
 *   esVocalFuerte('b') ‚Üí false
 */
bool esVocalFuerte(char c) {
    // Convertir a min√∫scula para hacer una sola comparaci√≥n
    // As√≠ 'A' y 'a' se tratan igual
    c = tolower(c);
    
    // Retornar true si es 'a', 'e' u 'o'
    // El operador || (OR) retorna true si alguna condici√≥n es verdadera
    return (c == 'a' || c == 'e' || c == 'o');
}

/*
 * Funci√≥n: esVocalDebil
 * ---------------------
 * Determina si un car√°cter es una vocal d√©bil (i, u)
 * 
 * Par√°metro:
 *   c - car√°cter a verificar
 * 
 * Retorna:
 *   true si es vocal d√©bil (i, u)
 *   false en caso contrario
 * 
 * Ejemplo:
 *   esVocalDebil('i') ‚Üí true
 *   esVocalDebil('U') ‚Üí true
 *   esVocalDebil('e') ‚Üí false
 */
bool esVocalDebil(char c) {
    // Convertir a min√∫scula
    c = tolower(c);
    
    // Retornar true si es 'i' o 'u'
    return (c == 'i' || c == 'u');
}

/*
 * Funci√≥n: esVocal
 * ----------------
 * Determina si un car√°cter es vocal (fuerte o d√©bil)
 * 
 * Par√°metro:
 *   c - car√°cter a verificar
 * 
 * Retorna:
 *   true si es cualquier vocal (a, e, i, o, u)
 *   false en caso contrario
 * 
 * Nota:
 *   Reutiliza las funciones esVocalFuerte y esVocalDebil
 */
bool esVocal(char c) {
    return esVocalFuerte(c) || esVocalDebil(c);
}

// =============================================================================
// FUNCI√ìN PRINCIPAL
// =============================================================================

int main() {
    // -------------------------------------------------------------------------
    // DECLARACI√ìN DE VARIABLES
    // -------------------------------------------------------------------------
    char cadena[256];         // Cadena de entrada (hasta 255 caracteres)
    int contadorFuertes = 0;  // Contador de vocales fuertes (a, e, o)
    int contadorDebiles = 0;  // Contador de vocales d√©biles (i, u)
    
    // -------------------------------------------------------------------------
    // ENTRADA DE DATOS
    // -------------------------------------------------------------------------
    cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë    CONTADOR DE VOCALES FUERTES Y D√âBILES                ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;
    cout << endl;
    
    // Mostrar informaci√≥n sobre las vocales
    cout << "üìö Informaci√≥n:" << endl;
    cout << "   ‚Ä¢ Vocales fuertes (abiertas): a, e, o" << endl;
    cout << "   ‚Ä¢ Vocales d√©biles (cerradas): i, u" << endl;
    cout << endl;
    
    cout << "Ingrese una cadena de texto: ";
    cin.getline(cadena, 256);
    
    // -------------------------------------------------------------------------
    // VALIDACI√ìN: Verificar que no sea una cadena vac√≠a
    // -------------------------------------------------------------------------
    if (strlen(cadena) == 0) {
        cout << "\n‚ö†Ô∏è  Advertencia: La cadena est√° vac√≠a." << endl;
        return 0;
    }
    
    // -------------------------------------------------------------------------
    // PROCESAMIENTO: Recorrer y clasificar vocales
    // -------------------------------------------------------------------------
    // Optimizaci√≥n: Calcular la longitud una sola vez
    // Evita llamar a strlen() en cada iteraci√≥n del bucle
    int longitud = strlen(cadena);
    
    // Recorrer cada car√°cter de la cadena
    for (int i = 0; i < longitud; i++) {
        char caracter = cadena[i];
        
        // Verificar si es vocal fuerte
        if (esVocalFuerte(caracter)) {
            contadorFuertes++;  // Incrementar contador de fuertes
        }
        // Verificar si es vocal d√©bil
        // Usamos else if porque un car√°cter no puede ser ambas
        else if (esVocalDebil(caracter)) {
            contadorDebiles++;  // Incrementar contador de d√©biles
        }
        // Si no es vocal, continuamos con el siguiente car√°cter
        // (podr√≠a ser consonante, n√∫mero, espacio, signo, etc.)
    }
    
    // -------------------------------------------------------------------------
    // C√ÅLCULOS ADICIONALES
    // -------------------------------------------------------------------------
    int totalVocales = contadorFuertes + contadorDebiles;
    int consonantes = 0;
    int espacios = 0;
    int otros = 0;
    
    // Segundo recorrido para contar otros tipos de caracteres
    for (int i = 0; i < longitud; i++) {
        char c = cadena[i];
        
        if (esVocal(c)) {
            // Ya contadas, no hacer nada
        }
        else if (isalpha(c)) {
            // Es letra pero no vocal, entonces es consonante
            consonantes++;
        }
        else if (isspace(c)) {
            // Es espacio en blanco (espacio, tab, etc.)
            espacios++;
        }
        else {
            // Es otro tipo de car√°cter (n√∫mero, puntuaci√≥n, etc.)
            otros++;
        }
    }
    
    // -------------------------------------------------------------------------
    // SALIDA DE RESULTADOS
    // -------------------------------------------------------------------------
    cout << endl;
    cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë                      RESULTADO                          ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;
    cout << endl;
    
    cout << "Cadena analizada: \"" << cadena << "\"" << endl;
    cout << "Longitud total: " << longitud << " caracteres" << endl;
    cout << endl;
    
    // Mostrar conteo de vocales
    cout << "üìä VOCALES:" << endl;
    cout << "   ‚îú‚îÄ Vocales fuertes (a, e, o): " << contadorFuertes << endl;
    cout << "   ‚îú‚îÄ Vocales d√©biles (i, u):    " << contadorDebiles << endl;
    cout << "   ‚îî‚îÄ Total de vocales:          " << totalVocales << endl;
    cout << endl;
    
    // Mostrar otros caracteres
    cout << "üìä OTROS CARACTERES:" << endl;
    cout << "   ‚îú‚îÄ Consonantes: " << consonantes << endl;
    cout << "   ‚îú‚îÄ Espacios:    " << espacios << endl;
    cout << "   ‚îî‚îÄ Otros:       " << otros << endl;
    cout << endl;
    
    // -------------------------------------------------------------------------
    // AN√ÅLISIS ESTAD√çSTICO
    // -------------------------------------------------------------------------
    if (totalVocales > 0) {
        cout << "üìà AN√ÅLISIS:" << endl;
        
        // Calcular porcentajes
        // Multiplicamos por 100.0 para obtener resultado con decimales
        double porcentajeFuertes = (contadorFuertes * 100.0) / totalVocales;
        double porcentajeDebiles = (contadorDebiles * 100.0) / totalVocales;
        
        // Configurar salida con 2 decimales
        cout << fixed << setprecision(2);
        
        cout << "   ‚îú‚îÄ Porcentaje de vocales fuertes: " << porcentajeFuertes << "%" << endl;
        cout << "   ‚îî‚îÄ Porcentaje de vocales d√©biles: " << porcentajeDebiles << "%" << endl;
        cout << endl;
        
        // Determinar cu√°l tipo predomina
        cout << "üîç CONCLUSI√ìN:" << endl;
        if (contadorFuertes > contadorDebiles) {
            cout << "   Predominan las vocales fuertes." << endl;
            int diferencia = contadorFuertes - contadorDebiles;
            cout << "   (hay " << diferencia << " vocales fuertes m√°s que d√©biles)" << endl;
        } 
        else if (contadorDebiles > contadorFuertes) {
            cout << "   Predominan las vocales d√©biles." << endl;
            int diferencia = contadorDebiles - contadorFuertes;
            cout << "   (hay " << diferencia << " vocales d√©biles m√°s que fuertes)" << endl;
        } 
        else {
            cout << "   Hay igual cantidad de vocales fuertes y d√©biles." << endl;
        }
    } 
    else {
        cout << "‚ö†Ô∏è  No se encontraron vocales en la cadena." << endl;
    }
    
    return 0;
}

/*
 * ============================================================================
 * EJEMPLO DE EJECUCI√ìN 1:
 * ============================================================================
 * 
 * ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 * ‚ïë    CONTADOR DE VOCALES FUERTES Y D√âBILES                ‚ïë
 * ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 * 
 * üìö Informaci√≥n:
 *    ‚Ä¢ Vocales fuertes (abiertas): a, e, o
 *    ‚Ä¢ Vocales d√©biles (cerradas): i, u
 * 
 * Ingrese una cadena de texto: Universidad Nacional de San Marcos
 * 
 * ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 * ‚ïë                      RESULTADO                          ‚ïë
 * ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 * 
 * Cadena analizada: "Universidad Nacional de San Marcos"
 * Longitud total: 36 caracteres
 * 
 * üìä VOCALES:
 *    ‚îú‚îÄ Vocales fuertes (a, e, o): 9
 *    ‚îú‚îÄ Vocales d√©biles (i, u):    4
 *    ‚îî‚îÄ Total de vocales:          13
 * 
 * üìä OTROS CARACTERES:
 *    ‚îú‚îÄ Consonantes: 17
 *    ‚îú‚îÄ Espacios:    5
 *    ‚îî‚îÄ Otros:       1
 * 
 * üìà AN√ÅLISIS:
 *    ‚îú‚îÄ Porcentaje de vocales fuertes: 69.23%
 *    ‚îî‚îÄ Porcentaje de vocales d√©biles: 30.77%
 * 
 * üîç CONCLUSI√ìN:
 *    Predominan las vocales fuertes.
 *    (hay 5 vocales fuertes m√°s que d√©biles)
 * 
 * ============================================================================
 * EJEMPLO DE EJECUCI√ìN 2:
 * ============================================================================
 * 
 * Ingrese una cadena de texto: Murci√©lago
 * 
 * Cadena analizada: "Murci√©lago"
 * Longitud total: 10 caracteres
 * 
 * üìä VOCALES:
 *    ‚îú‚îÄ Vocales fuertes (a, e, o): 3
 *    ‚îú‚îÄ Vocales d√©biles (i, u):    2
 *    ‚îî‚îÄ Total de vocales:          5
 * 
 * ============================================================================
 * NOTAS T√âCNICAS:
 * ============================================================================
 * 
 * 1. VOCALES EN ESPA√ëOL:
 *    
 *    Fuertes (abiertas): a, e, o
 *    - Se llaman "abiertas" porque la lengua desciende
 *    - Requieren mayor apertura de la mand√≠bula
 *    - Son m√°s sonoras
 *    
 *    D√©biles (cerradas): i, u
 *    - Se llaman "cerradas" porque la lengua asciende
 *    - Requieren menor apertura de la mand√≠bula
 *    - Son menos sonoras
 * 
 * 2. DIPTONGOS Y HIATOS:
 *    
 *    Diptongo (dos vocales en una s√≠laba):
 *    - Vocal fuerte + d√©bil: ai-re, eu-ro, au-to
 *    - D√©bil + vocal fuerte: cie-lo, cuo-ta, mie-do
 *    - D√©bil + d√©bil: ciu-dad, viu-da
 *    
 *    Hiato (dos vocales en s√≠labas separadas):
 *    - Dos vocales fuertes: ca-os, le-√≥n, te-a-tro
 *    - Vocal d√©bil acentuada: pa-√≠s, ba-√∫l, Ma-r√≠-a
 * 
 * 3. FUNCIONES BOOLEANAS:
 *    Las funciones que retornan bool son √∫tiles para:
 *    - Hacer el c√≥digo m√°s legible
 *    - Reutilizar l√≥gica de verificaci√≥n
 *    - Facilitar el mantenimiento
 *    - Crear abstracciones claras
 *    
 *    Ventajas:
 *    if (esVocalFuerte(c))  // ‚úì Claro y expresivo
 *    vs
 *    if (c=='a' || c=='e' || c=='o')  // ‚úó Repetitivo
 * 
 * 4. OPERADORES L√ìGICOS:
 *    
 *    && (AND l√≥gico):
 *    - Retorna true solo si AMBAS condiciones son verdaderas
 *    - Evaluaci√≥n en corto-circuito: si la primera es false, no eval√∫a la segunda
 *    
 *    || (OR l√≥gico):
 *    - Retorna true si AL MENOS UNA condici√≥n es verdadera
 *    - Evaluaci√≥n en corto-circuito: si la primera es true, no eval√∫a la segunda
 *    
 *    ! (NOT l√≥gico):
 *    - Invierte el valor booleano
 *    - !true = false, !false = true
 * 
 * 5. OPTIMIZACI√ìN CON SWITCH:
 *    Una alternativa para clasificar vocales:
 *    
 *    switch (tolower(caracter)) {
 *        case 'a': case 'e': case 'o':
 *            contadorFuertes++;
 *            break;
 *        case 'i': case 'u':
 *            contadorDebiles++;
 *            break;
 *    }
 * 
 * 6. FUNCIONES DE <cctype>:
 *    - isalpha(c): true si c es letra (a-z, A-Z)
 *    - isspace(c): true si c es espacio, tab, newline, etc.
 *    - isalnum(c): true si c es letra o d√≠gito
 *    - isdigit(c): true si c es d√≠gito (0-9)
 *    - ispunct(c): true si c es signo de puntuaci√≥n
 * 
 * 7. PORCENTAJES CON DECIMALES:
 *    Para calcular porcentajes correctamente:
 *    
 *    ‚ùå INCORRECTO:
 *    int porcentaje = (contador * 100) / total;
 *    // Divisi√≥n entera trunca decimales
 *    
 *    ‚úì CORRECTO:
 *    double porcentaje = (contador * 100.0) / total;
 *    // Al menos un operando debe ser double
 * 
 * 8. EXTENSIONES POSIBLES:
 *    - Contar cada vocal individualmente
 *    - Detectar diptongos autom√°ticamente
 *    - Detectar hiatos
 *    - An√°lisis sil√°bico b√°sico
 *    - Generar estad√≠sticas m√°s detalladas
 *    - Crear histograma visual de vocales
 * 
 * 9. COMPILACI√ìN:
 *    g++ -std=c++11 -Wall -Wextra 02_vocales_fuertes_debiles.cpp -o vocales
 *    ./vocales
 * ============================================================================
 */
